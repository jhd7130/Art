<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="User"><!-- namespace - 클래스명과 동일 -->
	<!-- id - 메소드명과 동일 -->
	<!-- resultType : row 1줄의 형태를 지정 -->
	<!-- 쿼리 작성 시 ;이 들어가면 실행되지 않음 -->
	
	<!-- 회원 등록 -->
	<insert id="addUser" parameterType="hashmap">
		INSERT INTO USERS(USER_NO, USER_ID, USER_NICKNAME, PW, NAME, SEX, BIRTHDAY, PHONE_NO, MAIL, MAIL_CERTIFICATE, EVENT_AGREEMENT)
		VALUES(USERS_SEQ.NEXTVAL, #{userId}, #{userNickname}, #{userPw}, #{userName}, #{gender}, #{birthYear}||'-'||#{birthMonth}||'-'||#{birthDay}, #{userPhone}, #{userMail}, #{userMailCheck}, #{eventAgree})
	</insert>
	
	<!-- 아이디 중복 체크 -->
	<select id="idCheck" parameterType="hashmap" resultType="Integer">
      SELECT COUNT(*)
      FROM USERS
      WHERE USER_ID = #{userId}
	</select>
	
	<!-- 닉네임 중복 체크 -->
	<select id="nicknameCheck" parameterType="hashmap" resultType="Integer">
      SELECT COUNT(*)
      FROM USERS
      WHERE USER_NICKNAME = #{userNickname}
	</select>
	
	<!-- 로그인 시 회원정보 가져오기 -->
	<select id="getUser" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO, USER_ID, USER_NICKNAME, PW, PROFILE_IMG_PATH, NAME, SEX, BIRTHDAY, PHONE_NO, MAIL, INTRODUCE, EVENT_AGREEMENT
		FROM USERS
		WHERE USER_ID = #{userId}
		AND PW = #{userPw}
		AND OUT_DATE IS NULL
	</select>
	
	<!-- 로그인 시 관리자정보 가져오기 -->
	<select id="getAdmin" parameterType="hashmap" resultType="hashmap">
		SELECT ADMIN_NO, ADMIN_ID, NAME, PW
		FROM ADMINISTRATOR
		WHERE ADMIN_ID = #{userId}
		AND PW = #{userPw}
		AND DEL = 1
	</select>
	
	<!-- 프로필 수정 -->
	<update id="updateProfile" parameterType="hashmap">
		UPDATE USERS SET PROFILE_IMG_PATH = #{profileImg}, USER_NICKNAME = #{userNickname}, INTRODUCE = #{userIntroduce}
		WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 개인정보 수정 -->
	<update id="updateSet" parameterType="hashmap">
		UPDATE USERS SET PW = #{userPw}, NAME = #{userName}, BIRTHDAY = #{birthYear}||'-'||#{birthMonth}||'-'||#{birthDay}, PHONE_NO = #{userPhone}, SEX = #{gender}, MAIL = #{userMail}, EVENT_AGREEMENT = #{userEventAgree}
		WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 개인정보 가져오기 -->
	<select id="getUser2" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO, USER_ID, USER_NICKNAME, PW, PROFILE_IMG_PATH, NAME, SEX, BIRTHDAY, PHONE_NO, MAIL, INTRODUCE, EVENT_AGREEMENT
		FROM USERS
		WHERE USER_NO = #{userNo}
	</select>

	<!-- 탈퇴하기 -->
	<update id="outUser" parameterType="hashmap">
		UPDATE USERS SET OUT_DATE = SYSDATE
		WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 아이디 찾기 -->
	<select id="idFind" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO, USER_ID, USER_NICKNAME, PW
		FROM USERS
		WHERE NAME = #{userName}
		AND MAIL = #{userMail}
		AND OUT_DATE IS NULL
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="pwFind" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO, USER_ID, USER_NICKNAME, PW
		FROM USERS
		WHERE USER_ID = #{userId}
		AND MAIL = #{userMail}
		AND OUT_DATE IS NULL
	</select>
	
	<!-- 임시 비밀번호 등록  -->
	<update id="updatePw" parameterType="hashmap">
		UPDATE USERS SET PW = #{pw}
		WHERE USER_ID = #{userId}
	</update>

</mapper>